

```{r}
#| label: load-pkgs
#| message: false


if (!require("pacman")) 
  install.packages("pacman")

pacman::p_load(tidyverse,
               readr,
               leaflet,
               here,
               gganimate,
               magick,
               sysfonts,
               showtext) 
```

## Dataset Setup
```{r}
# Read the CSV file
meteorite_data <- read_csv(here("data/Meteorite_Landings.csv"))
```

## Data Cleaning

```{r}
meteorite_data <- meteorite_data |> 
  na.omit(year)

meteorite_data$year <- as.numeric(meteorite_data$year)

meteorite_data_filtered <- meteorite_data |>
                            filter(year > 860 & year < 2100)

meteorite_data_filtered$reclong[meteorite_data_filtered$reclat == 0 & meteorite_data_filtered$reclong == 0] <- NA
meteorite_data_filtered$reclat[meteorite_data_filtered$reclat == 0 & meteorite_data_filtered$reclong == 0] <- NA


meteorite_data_filtered <- meteorite_data_filtered %>%
                            filter(!is.na(reclong) & !is.na(reclat))
```



## Plots
```{r warning=FALSE}
# Filter the data based on criteria
filtered_data <- subset(meteorite_data_filtered, `mass (g)` > 1000 & fall == "Fell")
# Plot the world map
world_map <- ggplot() +
  geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group), fill = "lightblue", color = "black", size = 0.25) +
  geom_point(data = filtered_data, aes(x = reclong, y = reclat), color = "red", size = 1) +
  labs(title = "Meteorite Landings") +
  theme_minimal()

# Show the plot
print(world_map)

```

```{r}
filtered_data
```

```{r filter for size}

# Filter the data based on criteria and classify mass
filtered_data <- subset(meteorite_data_filtered, `mass (g)` > 1000 & fall == "Fell")
filtered_data$meteor_size <- cut(filtered_data$`mass (g)`, breaks = c(0, 10000, 100000, Inf), labels = c("light", "average mass", "heavy"))

# Plot the world map
world_map <- ggplot() +
  geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group), fill = "lightblue", color = "black", size = 0.25) +
  geom_point(data = filtered_data, aes(x = reclong, y = reclat, color = meteor_size), size = 1.5) +
  labs(title = "Meteorite Landings") +
  scale_color_manual(values = c("light" = "yellow", "average mass" = "orange", "heavy" = "red")) +
  theme_minimal()

# Show the plot
print(world_map)


```




## Plots
```{r warning=FALSE}
# Filter the data for meteorites that have not fallen
filtered_data_not_fallen <- subset(meteorite_data_filtered, `mass (g)` > 1000 & fall == "Found")

# Plot the world map for meteorites that have not fallen
world_map_not_fallen <- ggplot() +
  geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group), fill = "lightblue", color = "black", size = 0.25) +
  geom_point(data = filtered_data_not_fallen, aes(x = reclong, y = reclat), color = "red", size = 1) +
  labs(title = "Meteorite Landings (Not Fallen)") +
  theme_minimal()

# Show the plot
print(world_map_not_fallen)
```



## Leaflet plot

```{r}
meteorite_data_filtered_fell <- meteorite_data_filtered |>
  filter(meteorite_data_filtered$fall == "Fell")


map_plot <- leaflet(data = meteorite_data_filtered_fell) |>
  addTiles() 


map_plot <- map_plot |>
  addCircleMarkers(lat = ~reclat, lng = ~reclong,  popup = ~fall, color = "#51EE00", stroke = FALSE, fillOpacity = 0.8, radius = 1.5)

map_plot
```


## Time series plot

```{r}

# Load Google font
font_add_google(name = "Lato", family = "Lato")
showtext_auto()

# Create line plot
linePlot <- meteorite_data |>
  group_by(year) |>
  summarise(count = n()) |>
  filter(year > 1950 & year < 2100) |>
  ggplot(aes(x = year, y = count)) +
  geom_line(linewidth = 1,
            color = "#607D8B") +
  annotate("segment",
           x = 1975,
           xend = 1975,
           y = 0,
           yend = 3500,
           linetype = "dotted") +
  
  annotate("segment",
           x = 1999,
           xend = 1999,
           y = 0,
           yend = 3500,
           linetype = "dotted") +
  annotate("segment",
           x = 2001,
           xend = 2001,
           y = 0,
           yend = 3500,
           linetype = "dotted") +
  annotate("segment",
           x = 2002,
           xend = 2002,
           y = 0,
           yend = 3500,
           linetype = "dotted") +
  annotate("segment",
           x = 1955,
           xend = 1955,
           y = 0,
           yend = 3500,
           linetype = "dotted") +
  annotate("text", 
           x = 1975, 
           y = 3700, 
           label = "End of the\nSpace race",
           family = "Lato") +
  annotate("text", 
           x = 2000, 
           y = 3650, 
           label = "Last Leonid Showers",
           family = "Lato") +
  annotate("text", 
           x = 1955, 
           y = 3700, 
           label = "Start of the\nSpace race",
           family = "Lato") +
  coord_cartesian(ylim = c(150,3820)) +
  labs(x = "Year", 
       y = "Number of Observations") +
  theme_classic() +
  theme(plot.title.position = "plot",
        panel.grid.major.y = element_line()) +
  transition_reveal(year)

# Animate Line plot
linePlotGif <- animate(linePlot,
                       fps = 4,
                       nframes = 100,
                       width = 600,
                       height = 400)
anim_save("linePlotGif.gif")

# Create world map
worldMap <- meteorite_data |>
  group_by(year) |>
  filter(year > 1950 & year < 2100,
         !is.na(reclat),
         !is.na(reclong),
         reclong < 350) |>
  ggplot(aes(x = reclong, y = reclat)) +
  geom_polygon(data = as_tibble(map_data("world")),
               aes(x = long, y = lat, group = group),
               inherit.aes=F,
               fill = "white") +
  coord_quickmap() +
  geom_point() +
  labs(title = "Time Series of Meteor Observations by Year",
       subtitle = "Current Year: {closest_state}") +
  theme_void() +
  theme(panel.background = element_rect(fill = "skyblue"),
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) +
  transition_states(year,
                    transition_length = 1,
                    state_length = 1) +
  shadow_wake(wake_length = 0.25) +
  enter_fade()

# Animate world map
worldMapGif <- animate(worldMap,
        fps = 4,
        nframes = 100,
        width = 600,
        height = 1100)
anim_save("worldMapGif.gif")

# Modify white space margins around plots
lpMGif <- image_border(image_trim(image_read("linePlotGif.gif")), "white", "20x20")
wmMGif <- image_border(image_trim(image_read("worldMapGif.gif")), "white", "20x20")

# Arrange plots on top of each other
newGif <- image_append(c(wmMGif[1], lpMGif[1]),
                       stack = TRUE)
for (i in 2:100){
  combined <- image_append(c(wmMGif[i], lpMGif[i]),
                           stack = TRUE)
  newGif <- c(newGif, combined)
}

newGif

```